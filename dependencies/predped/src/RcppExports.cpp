// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// time_series_rcpp
DataFrame time_series_rcpp(List trace, double time_step);
RcppExport SEXP _predped_time_series_rcpp(SEXP traceSEXP, SEXP time_stepSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type trace(traceSEXP);
    Rcpp::traits::input_parameter< double >::type time_step(time_stepSEXP);
    rcpp_result_gen = Rcpp::wrap(time_series_rcpp(trace, time_step));
    return rcpp_result_gen;
END_RCPP
}
// unpack_trace_rcpp
DataFrame unpack_trace_rcpp(List trace, NumericMatrix velocities, NumericMatrix orientations, bool stay_stopped, double time_step);
RcppExport SEXP _predped_unpack_trace_rcpp(SEXP traceSEXP, SEXP velocitiesSEXP, SEXP orientationsSEXP, SEXP stay_stoppedSEXP, SEXP time_stepSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type trace(traceSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type velocities(velocitiesSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type orientations(orientationsSEXP);
    Rcpp::traits::input_parameter< bool >::type stay_stopped(stay_stoppedSEXP);
    Rcpp::traits::input_parameter< double >::type time_step(time_stepSEXP);
    rcpp_result_gen = Rcpp::wrap(unpack_trace_rcpp(trace, velocities, orientations, stay_stopped, time_step));
    return rcpp_result_gen;
END_RCPP
}
// unique
std::unordered_set<std::string> unique(CharacterVector x);
RcppExport SEXP _predped_unique(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< CharacterVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unique(x));
    return rcpp_result_gen;
END_RCPP
}
// mll_rcpp
List mll_rcpp(List data, List parameters, CharacterVector ids, IntegerVector idx, IntegerVector cells, IntegerVector sizes, bool summed);
RcppExport SEXP _predped_mll_rcpp(SEXP dataSEXP, SEXP parametersSEXP, SEXP idsSEXP, SEXP idxSEXP, SEXP cellsSEXP, SEXP sizesSEXP, SEXP summedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type data(dataSEXP);
    Rcpp::traits::input_parameter< List >::type parameters(parametersSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type ids(idsSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type idx(idxSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type cells(cellsSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type sizes(sizesSEXP);
    Rcpp::traits::input_parameter< bool >::type summed(summedSEXP);
    rcpp_result_gen = Rcpp::wrap(mll_rcpp(data, parameters, ids, idx, cells, sizes, summed));
    return rcpp_result_gen;
END_RCPP
}
// psUtility
NumericVector psUtility(double a_preferred_speed, double b_preferred_speed, double preferred_speed, double slowing_time, NumericVector current_speed, NumericVector goal_distance);
RcppExport SEXP _predped_psUtility(SEXP a_preferred_speedSEXP, SEXP b_preferred_speedSEXP, SEXP preferred_speedSEXP, SEXP slowing_timeSEXP, SEXP current_speedSEXP, SEXP goal_distanceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type a_preferred_speed(a_preferred_speedSEXP);
    Rcpp::traits::input_parameter< double >::type b_preferred_speed(b_preferred_speedSEXP);
    Rcpp::traits::input_parameter< double >::type preferred_speed(preferred_speedSEXP);
    Rcpp::traits::input_parameter< double >::type slowing_time(slowing_timeSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type current_speed(current_speedSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type goal_distance(goal_distanceSEXP);
    rcpp_result_gen = Rcpp::wrap(psUtility(a_preferred_speed, b_preferred_speed, preferred_speed, slowing_time, current_speed, goal_distance));
    return rcpp_result_gen;
END_RCPP
}
// gaUtility
NumericVector gaUtility(double b_goal_direction, double a_goal_direction, NumericVector goal_angles);
RcppExport SEXP _predped_gaUtility(SEXP b_goal_directionSEXP, SEXP a_goal_directionSEXP, SEXP goal_anglesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type b_goal_direction(b_goal_directionSEXP);
    Rcpp::traits::input_parameter< double >::type a_goal_direction(a_goal_directionSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type goal_angles(goal_anglesSEXP);
    rcpp_result_gen = Rcpp::wrap(gaUtility(b_goal_direction, a_goal_direction, goal_angles));
    return rcpp_result_gen;
END_RCPP
}
// caUtility
NumericVector caUtility(double b_current_direction, double a_current_direction, double blr_current_direction);
RcppExport SEXP _predped_caUtility(SEXP b_current_directionSEXP, SEXP a_current_directionSEXP, SEXP blr_current_directionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type b_current_direction(b_current_directionSEXP);
    Rcpp::traits::input_parameter< double >::type a_current_direction(a_current_directionSEXP);
    Rcpp::traits::input_parameter< double >::type blr_current_direction(blr_current_directionSEXP);
    rcpp_result_gen = Rcpp::wrap(caUtility(b_current_direction, a_current_direction, blr_current_direction));
    return rcpp_result_gen;
END_RCPP
}
// idUtility
NumericVector idUtility(double b_current_direction, double d_current_direction, double a_current_direction, LogicalVector id_ingroup, LogicalMatrix id_check, NumericMatrix id_distance, NumericVector impossible_utility);
RcppExport SEXP _predped_idUtility(SEXP b_current_directionSEXP, SEXP d_current_directionSEXP, SEXP a_current_directionSEXP, SEXP id_ingroupSEXP, SEXP id_checkSEXP, SEXP id_distanceSEXP, SEXP impossible_utilitySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type b_current_direction(b_current_directionSEXP);
    Rcpp::traits::input_parameter< double >::type d_current_direction(d_current_directionSEXP);
    Rcpp::traits::input_parameter< double >::type a_current_direction(a_current_directionSEXP);
    Rcpp::traits::input_parameter< LogicalVector >::type id_ingroup(id_ingroupSEXP);
    Rcpp::traits::input_parameter< LogicalMatrix >::type id_check(id_checkSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type id_distance(id_distanceSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type impossible_utility(impossible_utilitySEXP);
    rcpp_result_gen = Rcpp::wrap(idUtility(b_current_direction, d_current_direction, a_current_direction, id_ingroup, id_check, id_distance, impossible_utility));
    return rcpp_result_gen;
END_RCPP
}
// baUtility
NumericVector baUtility(double a_blocked, double b_blocked, NumericVector ba_angle, IntegerVector cone_id);
RcppExport SEXP _predped_baUtility(SEXP a_blockedSEXP, SEXP b_blockedSEXP, SEXP ba_angleSEXP, SEXP cone_idSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type a_blocked(a_blockedSEXP);
    Rcpp::traits::input_parameter< double >::type b_blocked(b_blockedSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type ba_angle(ba_angleSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type cone_id(cone_idSEXP);
    rcpp_result_gen = Rcpp::wrap(baUtility(a_blocked, b_blocked, ba_angle, cone_id));
    return rcpp_result_gen;
END_RCPP
}
// flUtility
NumericVector flUtility(double a_leader, double b_leader, double d_leader, NumericMatrix leaders, NumericMatrix distances);
RcppExport SEXP _predped_flUtility(SEXP a_leaderSEXP, SEXP b_leaderSEXP, SEXP d_leaderSEXP, SEXP leadersSEXP, SEXP distancesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type a_leader(a_leaderSEXP);
    Rcpp::traits::input_parameter< double >::type b_leader(b_leaderSEXP);
    Rcpp::traits::input_parameter< double >::type d_leader(d_leaderSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type leaders(leadersSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type distances(distancesSEXP);
    rcpp_result_gen = Rcpp::wrap(flUtility(a_leader, b_leader, d_leader, leaders, distances));
    return rcpp_result_gen;
END_RCPP
}
// wbUtility
NumericVector wbUtility(double a_buddy, double b_buddy, NumericMatrix buddies, NumericMatrix distances);
RcppExport SEXP _predped_wbUtility(SEXP a_buddySEXP, SEXP b_buddySEXP, SEXP buddiesSEXP, SEXP distancesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type a_buddy(a_buddySEXP);
    Rcpp::traits::input_parameter< double >::type b_buddy(b_buddySEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type buddies(buddiesSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type distances(distancesSEXP);
    rcpp_result_gen = Rcpp::wrap(wbUtility(a_buddy, b_buddy, buddies, distances));
    return rcpp_result_gen;
END_RCPP
}
// destinationAngle
NumericMatrix destinationAngle(double orientation, NumericMatrix agent_position, NumericMatrix goal_position);
RcppExport SEXP _predped_destinationAngle(SEXP orientationSEXP, SEXP agent_positionSEXP, SEXP goal_positionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type orientation(orientationSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type agent_position(agent_positionSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type goal_position(goal_positionSEXP);
    rcpp_result_gen = Rcpp::wrap(destinationAngle(orientation, agent_position, goal_position));
    return rcpp_result_gen;
END_RCPP
}
// predClose
RObject predClose(int agent_idx, NumericMatrix agent_position, double orientation, NumericMatrix others_position, NumericVector radius, NumericMatrix centers, NumericMatrix predicted_positions, List objects);
RcppExport SEXP _predped_predClose(SEXP agent_idxSEXP, SEXP agent_positionSEXP, SEXP orientationSEXP, SEXP others_positionSEXP, SEXP radiusSEXP, SEXP centersSEXP, SEXP predicted_positionsSEXP, SEXP objectsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type agent_idx(agent_idxSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type agent_position(agent_positionSEXP);
    Rcpp::traits::input_parameter< double >::type orientation(orientationSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type others_position(others_positionSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type radius(radiusSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type centers(centersSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type predicted_positions(predicted_positionsSEXP);
    Rcpp::traits::input_parameter< List >::type objects(objectsSEXP);
    rcpp_result_gen = Rcpp::wrap(predClose(agent_idx, agent_position, orientation, others_position, radius, centers, predicted_positions, objects));
    return rcpp_result_gen;
END_RCPP
}
// blockedAngle
NumericVector blockedAngle(NumericMatrix agent_position, double orientation, double speed, NumericMatrix predictions_minus_agent, NumericVector radii, List objects);
RcppExport SEXP _predped_blockedAngle(SEXP agent_positionSEXP, SEXP orientationSEXP, SEXP speedSEXP, SEXP predictions_minus_agentSEXP, SEXP radiiSEXP, SEXP objectsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type agent_position(agent_positionSEXP);
    Rcpp::traits::input_parameter< double >::type orientation(orientationSEXP);
    Rcpp::traits::input_parameter< double >::type speed(speedSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type predictions_minus_agent(predictions_minus_agentSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type radii(radiiSEXP);
    Rcpp::traits::input_parameter< List >::type objects(objectsSEXP);
    rcpp_result_gen = Rcpp::wrap(blockedAngle(agent_position, orientation, speed, predictions_minus_agent, radii, objects));
    return rcpp_result_gen;
END_RCPP
}
// bodyObjectOK
LogicalMatrix bodyObjectOK(double radius, NumericMatrix centers, List objects, LogicalVector check);
RcppExport SEXP _predped_bodyObjectOK(SEXP radiusSEXP, SEXP centersSEXP, SEXP objectsSEXP, SEXP checkSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type radius(radiusSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type centers(centersSEXP);
    Rcpp::traits::input_parameter< List >::type objects(objectsSEXP);
    Rcpp::traits::input_parameter< LogicalVector >::type check(checkSEXP);
    rcpp_result_gen = Rcpp::wrap(bodyObjectOK(radius, centers, objects, check));
    return rcpp_result_gen;
END_RCPP
}
// overlap_with_objects_rcpp
LogicalMatrix overlap_with_objects_rcpp(S4 agent, S4 background, NumericMatrix centers, LogicalMatrix check, double space_between);
RcppExport SEXP _predped_overlap_with_objects_rcpp(SEXP agentSEXP, SEXP backgroundSEXP, SEXP centersSEXP, SEXP checkSEXP, SEXP space_betweenSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< S4 >::type agent(agentSEXP);
    Rcpp::traits::input_parameter< S4 >::type background(backgroundSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type centers(centersSEXP);
    Rcpp::traits::input_parameter< LogicalMatrix >::type check(checkSEXP);
    Rcpp::traits::input_parameter< double >::type space_between(space_betweenSEXP);
    rcpp_result_gen = Rcpp::wrap(overlap_with_objects_rcpp(agent, background, centers, check, space_between));
    return rcpp_result_gen;
END_RCPP
}
// moving_options_rcpp
LogicalMatrix moving_options_rcpp(S4 agent, S4 state, S4 background, NumericMatrix centers);
RcppExport SEXP _predped_moving_options_rcpp(SEXP agentSEXP, SEXP stateSEXP, SEXP backgroundSEXP, SEXP centersSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< S4 >::type agent(agentSEXP);
    Rcpp::traits::input_parameter< S4 >::type state(stateSEXP);
    Rcpp::traits::input_parameter< S4 >::type background(backgroundSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type centers(centersSEXP);
    rcpp_result_gen = Rcpp::wrap(moving_options_rcpp(agent, state, background, centers));
    return rcpp_result_gen;
END_RCPP
}
// nodes_on_circumference_rcpp
NumericMatrix nodes_on_circumference_rcpp(S4 object, double space_between);
RcppExport SEXP _predped_nodes_on_circumference_rcpp(SEXP objectSEXP, SEXP space_betweenSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< S4 >::type object(objectSEXP);
    Rcpp::traits::input_parameter< double >::type space_between(space_betweenSEXP);
    rcpp_result_gen = Rcpp::wrap(nodes_on_circumference_rcpp(object, space_between));
    return rcpp_result_gen;
END_RCPP
}
// in_object_rcpp
LogicalVector in_object_rcpp(S4 object, NumericMatrix x);
RcppExport SEXP _predped_in_object_rcpp(SEXP objectSEXP, SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< S4 >::type object(objectSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(in_object_rcpp(object, x));
    return rcpp_result_gen;
END_RCPP
}
// predict_movement_rcpp
NumericVector predict_movement_rcpp(S4 agent, bool stay_stopped, double time_step);
RcppExport SEXP _predped_predict_movement_rcpp(SEXP agentSEXP, SEXP stay_stoppedSEXP, SEXP time_stepSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< S4 >::type agent(agentSEXP);
    Rcpp::traits::input_parameter< bool >::type stay_stopped(stay_stoppedSEXP);
    Rcpp::traits::input_parameter< double >::type time_step(time_stepSEXP);
    rcpp_result_gen = Rcpp::wrap(predict_movement_rcpp(agent, stay_stopped, time_step));
    return rcpp_result_gen;
END_RCPP
}
// create_agent_specifications_rcpp
List create_agent_specifications_rcpp(List agent_list, bool stay_stopped, double time_step);
RcppExport SEXP _predped_create_agent_specifications_rcpp(SEXP agent_listSEXP, SEXP stay_stoppedSEXP, SEXP time_stepSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type agent_list(agent_listSEXP);
    Rcpp::traits::input_parameter< bool >::type stay_stopped(stay_stoppedSEXP);
    Rcpp::traits::input_parameter< double >::type time_step(time_stepSEXP);
    rcpp_result_gen = Rcpp::wrap(create_agent_specifications_rcpp(agent_list, stay_stopped, time_step));
    return rcpp_result_gen;
END_RCPP
}
// distance_group_centroid_rcpp
RObject distance_group_centroid_rcpp(NumericMatrix predictions, NumericMatrix centers, int number_agents);
RcppExport SEXP _predped_distance_group_centroid_rcpp(SEXP predictionsSEXP, SEXP centersSEXP, SEXP number_agentsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type predictions(predictionsSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type centers(centersSEXP);
    Rcpp::traits::input_parameter< int >::type number_agents(number_agentsSEXP);
    rcpp_result_gen = Rcpp::wrap(distance_group_centroid_rcpp(predictions, centers, number_agents));
    return rcpp_result_gen;
END_RCPP
}
// get_angles_rcpp
RObject get_angles_rcpp(int agent_idx, NumericVector agent_groups, NumericVector position, double orientation, NumericMatrix predictions, NumericMatrix centers, bool any_member);
RcppExport SEXP _predped_get_angles_rcpp(SEXP agent_idxSEXP, SEXP agent_groupsSEXP, SEXP positionSEXP, SEXP orientationSEXP, SEXP predictionsSEXP, SEXP centersSEXP, SEXP any_memberSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type agent_idx(agent_idxSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type agent_groups(agent_groupsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type position(positionSEXP);
    Rcpp::traits::input_parameter< double >::type orientation(orientationSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type predictions(predictionsSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type centers(centersSEXP);
    Rcpp::traits::input_parameter< bool >::type any_member(any_memberSEXP);
    rcpp_result_gen = Rcpp::wrap(get_angles_rcpp(agent_idx, agent_groups, position, orientation, predictions, centers, any_member));
    return rcpp_result_gen;
END_RCPP
}
// compute_utility_variables_rcpp
DataFrame compute_utility_variables_rcpp(S4 agent, S4 state, S4 background, List agent_specifications, NumericMatrix centers, LogicalMatrix check_original);
RcppExport SEXP _predped_compute_utility_variables_rcpp(SEXP agentSEXP, SEXP stateSEXP, SEXP backgroundSEXP, SEXP agent_specificationsSEXP, SEXP centersSEXP, SEXP check_originalSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< S4 >::type agent(agentSEXP);
    Rcpp::traits::input_parameter< S4 >::type state(stateSEXP);
    Rcpp::traits::input_parameter< S4 >::type background(backgroundSEXP);
    Rcpp::traits::input_parameter< List >::type agent_specifications(agent_specificationsSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type centers(centersSEXP);
    Rcpp::traits::input_parameter< LogicalMatrix >::type check_original(check_originalSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_utility_variables_rcpp(agent, state, background, agent_specifications, centers, check_original));
    return rcpp_result_gen;
END_RCPP
}
// gc_utility_rcpp
NumericVector gc_utility_rcpp(double a_group_centroid, double b_group_centroid, double radius, NumericVector cell_distances, double stop_utility, int nped);
RcppExport SEXP _predped_gc_utility_rcpp(SEXP a_group_centroidSEXP, SEXP b_group_centroidSEXP, SEXP radiusSEXP, SEXP cell_distancesSEXP, SEXP stop_utilitySEXP, SEXP npedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type a_group_centroid(a_group_centroidSEXP);
    Rcpp::traits::input_parameter< double >::type b_group_centroid(b_group_centroidSEXP);
    Rcpp::traits::input_parameter< double >::type radius(radiusSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type cell_distances(cell_distancesSEXP);
    Rcpp::traits::input_parameter< double >::type stop_utility(stop_utilitySEXP);
    Rcpp::traits::input_parameter< int >::type nped(npedSEXP);
    rcpp_result_gen = Rcpp::wrap(gc_utility_rcpp(a_group_centroid, b_group_centroid, radius, cell_distances, stop_utility, nped));
    return rcpp_result_gen;
END_RCPP
}
// vf_utility_rcpp
NumericVector vf_utility_rcpp(double b_visual_field, NumericVector relative_angles);
RcppExport SEXP _predped_vf_utility_rcpp(SEXP b_visual_fieldSEXP, SEXP relative_anglesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type b_visual_field(b_visual_fieldSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type relative_angles(relative_anglesSEXP);
    rcpp_result_gen = Rcpp::wrap(vf_utility_rcpp(b_visual_field, relative_angles));
    return rcpp_result_gen;
END_RCPP
}
// utility_rcpp
NumericVector utility_rcpp(DataFrame data, DataFrame parameters);
RcppExport SEXP _predped_utility_rcpp(SEXP dataSEXP, SEXP parametersSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DataFrame >::type data(dataSEXP);
    Rcpp::traits::input_parameter< DataFrame >::type parameters(parametersSEXP);
    rcpp_result_gen = Rcpp::wrap(utility_rcpp(data, parameters));
    return rcpp_result_gen;
END_RCPP
}
// utility_agent_rcpp
NumericVector utility_agent_rcpp(S4 agent, S4 state, S4 background, List agent_specifications, NumericMatrix centers, LogicalMatrix check);
RcppExport SEXP _predped_utility_agent_rcpp(SEXP agentSEXP, SEXP stateSEXP, SEXP backgroundSEXP, SEXP agent_specificationsSEXP, SEXP centersSEXP, SEXP checkSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< S4 >::type agent(agentSEXP);
    Rcpp::traits::input_parameter< S4 >::type state(stateSEXP);
    Rcpp::traits::input_parameter< S4 >::type background(backgroundSEXP);
    Rcpp::traits::input_parameter< List >::type agent_specifications(agent_specificationsSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type centers(centersSEXP);
    Rcpp::traits::input_parameter< LogicalMatrix >::type check(checkSEXP);
    rcpp_result_gen = Rcpp::wrap(utility_agent_rcpp(agent, state, background, agent_specifications, centers, check));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_predped_time_series_rcpp", (DL_FUNC) &_predped_time_series_rcpp, 2},
    {"_predped_unpack_trace_rcpp", (DL_FUNC) &_predped_unpack_trace_rcpp, 5},
    {"_predped_unique", (DL_FUNC) &_predped_unique, 1},
    {"_predped_mll_rcpp", (DL_FUNC) &_predped_mll_rcpp, 7},
    {"_predped_psUtility", (DL_FUNC) &_predped_psUtility, 6},
    {"_predped_gaUtility", (DL_FUNC) &_predped_gaUtility, 3},
    {"_predped_caUtility", (DL_FUNC) &_predped_caUtility, 3},
    {"_predped_idUtility", (DL_FUNC) &_predped_idUtility, 7},
    {"_predped_baUtility", (DL_FUNC) &_predped_baUtility, 4},
    {"_predped_flUtility", (DL_FUNC) &_predped_flUtility, 5},
    {"_predped_wbUtility", (DL_FUNC) &_predped_wbUtility, 4},
    {"_predped_destinationAngle", (DL_FUNC) &_predped_destinationAngle, 3},
    {"_predped_predClose", (DL_FUNC) &_predped_predClose, 8},
    {"_predped_blockedAngle", (DL_FUNC) &_predped_blockedAngle, 6},
    {"_predped_bodyObjectOK", (DL_FUNC) &_predped_bodyObjectOK, 4},
    {"_predped_overlap_with_objects_rcpp", (DL_FUNC) &_predped_overlap_with_objects_rcpp, 5},
    {"_predped_moving_options_rcpp", (DL_FUNC) &_predped_moving_options_rcpp, 4},
    {"_predped_nodes_on_circumference_rcpp", (DL_FUNC) &_predped_nodes_on_circumference_rcpp, 2},
    {"_predped_in_object_rcpp", (DL_FUNC) &_predped_in_object_rcpp, 2},
    {"_predped_predict_movement_rcpp", (DL_FUNC) &_predped_predict_movement_rcpp, 3},
    {"_predped_create_agent_specifications_rcpp", (DL_FUNC) &_predped_create_agent_specifications_rcpp, 3},
    {"_predped_distance_group_centroid_rcpp", (DL_FUNC) &_predped_distance_group_centroid_rcpp, 3},
    {"_predped_get_angles_rcpp", (DL_FUNC) &_predped_get_angles_rcpp, 7},
    {"_predped_compute_utility_variables_rcpp", (DL_FUNC) &_predped_compute_utility_variables_rcpp, 6},
    {"_predped_gc_utility_rcpp", (DL_FUNC) &_predped_gc_utility_rcpp, 6},
    {"_predped_vf_utility_rcpp", (DL_FUNC) &_predped_vf_utility_rcpp, 2},
    {"_predped_utility_rcpp", (DL_FUNC) &_predped_utility_rcpp, 2},
    {"_predped_utility_agent_rcpp", (DL_FUNC) &_predped_utility_agent_rcpp, 6},
    {NULL, NULL, 0}
};

RcppExport void R_init_predped(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
